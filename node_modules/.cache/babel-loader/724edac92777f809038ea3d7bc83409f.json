{"ast":null,"code":"export function calculateWinner(squares) {\n  const lines = [// this calls look up array - all the winning combinations\n  [0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      //if a matches b and matche c - it is a winning situation\n      return squares[a];\n    }\n  }\n\n  return null;\n}\nconst squares = [null, null, null, 'X', 'X', 'O', null, null, null];\nconst squares2 = [null, null, null, 'X', 'X', 'X', null, null, null];\nconsole.log(calculateWinner(squares));\nconsole.log(calculateWinner(squares2));","map":{"version":3,"sources":["/home/dci/Documents/DCI/Class Ã¼bungen/React/tic-tac-toe-hook/src/Helpers.js"],"names":["calculateWinner","squares","lines","i","length","a","b","c","squares2","console","log"],"mappings":"AAAA,OAAO,SAASA,eAAT,CAAyBC,OAAzB,EAAkC;AAErC,QAAMC,KAAK,GAAG,CAAE;AACZ,GAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADU,EAEV,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFU,EAGV,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHU,EAIV,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAJU,EAKV,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CALU,EAMV,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CANU,EAOV,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAPU,EAQV,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CARU,CAAd;;AAUA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,UAAM,CAACE,CAAD,EAAIC,CAAJ,EAAOC,CAAP,IAAYL,KAAK,CAACC,CAAD,CAAvB;;AACA,QAAIF,OAAO,CAACI,CAAD,CAAP,IAAcJ,OAAO,CAACI,CAAD,CAAP,KAAeJ,OAAO,CAACK,CAAD,CAApC,IAA2CL,OAAO,CAACI,CAAD,CAAP,KAAeJ,OAAO,CAACM,CAAD,CAArE,EAA0E;AAAE;AACxE,aAAON,OAAO,CAACI,CAAD,CAAd;AACH;AAEL;;AAEJ,SAAO,IAAP;AAEC;AAED,MAAMJ,OAAO,GAAG,CACZ,IADY,EACN,IADM,EACA,IADA,EAEZ,GAFY,EAEP,GAFO,EAEF,GAFE,EAGZ,IAHY,EAGN,IAHM,EAGA,IAHA,CAAhB;AAKA,MAAMO,QAAQ,GAAG,CACb,IADa,EACP,IADO,EACD,IADC,EAEb,GAFa,EAER,GAFQ,EAEH,GAFG,EAGb,IAHa,EAGP,IAHO,EAGD,IAHC,CAAjB;AAKAC,OAAO,CAACC,GAAR,CAAYV,eAAe,CAACC,OAAD,CAA3B;AACAQ,OAAO,CAACC,GAAR,CAAYV,eAAe,CAACQ,QAAD,CAA3B","sourcesContent":["export function calculateWinner(squares) {\n\n    const lines = [ // this calls look up array - all the winning combinations\n        [0, 1, 2], \n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6], \n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6] \n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) { //if a matches b and matche c - it is a winning situation\n            return squares[a];\n        }\n   \n   }\n\nreturn null;\n\n}\n\nconst squares = [\n    null, null, null,\n    'X', 'X', 'O',\n    null, null, null\n];\nconst squares2 = [\n    null, null, null,\n    'X', 'X', 'X',\n    null, null, null\n];\nconsole.log(calculateWinner(squares));\nconsole.log(calculateWinner(squares2));"]},"metadata":{},"sourceType":"module"}